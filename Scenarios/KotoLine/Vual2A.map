BveTs Map 2.02
$distance;
Curve.BeginTransition();;
	Curve.Begin(-400,0);
	Track['3'].X.Interpolate(0,0);
	Track['4'].X.Interpolate(0,200);
	Track['6'].X.Interpolate(0,200);

	Repeater['pole4'].Begin('4',0,0,0, ,180, ,3,,20, 'bridgepole');
	Repeater['kasen4'].Begin0('4',3,39.99,40,'kasen');

distance+20;
	Curve.BeginTransition();
	Track['4'].X.Interpolate(1.00,0);
	Track['6'].X.Interpolate(1.00,0);

distance+50;
	Curve.Begin(2000,0);
	Track['4'].X.Interpolate(6.25,-1000);
	Track['6'].X.Interpolate(6.25,-1000);

distance+100;
	Curve.End();
$Beacon=distance;
distance+250;
	Beacon.Put(16,0,0); #分岐
	SpeedLimit.End();
$Beacon;
	Track['4'].X.Interpolate(11.22,0);
	Track['6'].X.Interpolate(11.22,0);

distance+2;
	//Train['903M'].Stop(3, 0, 1.7, 85);
	Train['902M'].Stop(3, 0, 0, 0);
	Repeater['SignalSwitch'].Begin0( // リピーターキーには任意の文字列を指定できます。ステートメント間の判別のために使うも、補足情報をプラグインへ渡すために使うも良しです。
		'4', 0, 0, 0, // 連続ストラクチャーの設置先軌道は地上子の設置先軌道としてそのまま使用されます。
		'AtsEx::User::Toukaitetudou::SingleTrackSignal::SignalChange.Switch', // ステートメント名。「Station.Load」や「Beacon.Put」に当たる部分をここで指定します。
		'sig1','902M'); // 2 つめ以降のストラクチャーを使って、ステートメントに引数を持たせることができます。もちろん引数なしで良い場合は省略可。

	// 《備考：引数を渡す 2 種類の方法》
	// 
	// ① 2 つめ以降のストラクチャーを使う
	//  上の「パターン 1」で使った方法。
	//  ストラクチャーとしてあらかじめ定義しておく必要があるので、あらかじめとり得る値が数通りに絞られているケースでは見やすくて便利ですが、
	//  例えば「○○までの距離」など、とり得る値がほぼ無限にあるケースには不向きです。
	//
	// ② リピーターキーを使う
	//  下の「パターン 2」で使っている方法。
	//  ①とは異なり、とり得る値をストラクチャーとして定義しておく必要がないため、例えば「○○までの距離」などのとり得る値がほぼ無限にあるケースにも対応できます。
	// ただし①と比べて少し読みづらいので、基本的には①の方法をとり、①で対応できない場合にのみ②の方法を使うことを推奨します。

	Repeater['SignalSwitch'].End(); // 終了を忘れると BVE が重くなるので注意。特に設置間隔を 0m に設定した場合、継続不可能な程にまで重くなることがあります。

distance+1;
	
distance+7;

	Structure['formL'].Put('4',0,-1.29,-4.5,-15,,,,);
	Structure['formR'].Put('1',0,-1.29,-4.5,-15,,,,);
	Structure['formgroundL'].Put('4',0,-1.29,-4.5,-15,,,,);
	Structure['formgroundL'].Put('4',-2,-1.29,-4.5,-15,,,,);
	Structure['formgroundR'].Put('1',0,-1.29,-4.5,-15,,,,);
	Structure['formgroundR'].Put('1',2,-1.29,-4.5,-15,,,,);

	Repeater['formL1'].Begin('4',0, 0, 0, , , ,3,,5, 'formL');
	Repeater['formR1'].Begin('1',0, 0, 0, , , ,3,,5, 'formR');
	Repeater['formgroundL1'].Begin('4',0, 0, 0, , , ,3,,5, 'formgroundL');
	Repeater['formgroundL2'].Begin('4',-2, 0, 0, , , ,3,,5, 'formgroundL');
	Repeater['formgroundR1'].Begin('1',0, 0, 0, , , ,3,,5, 'formgroundR');
	Repeater['formgroundR2'].Begin('1',2, 0, 0, , , ,3,,5, 'formgroundR');

	Train['902M'].Enable(1);
distance+40;
	Repeater['Vual'].Begin('1',5.61,1.1,0,0,90,0,,,70,'Vual');
distance+207;
	Station['Vual'].Put(1,-5,5);
	Structure['stop'].Put('1',-2,-0.3,0,,,,,);
distance+8;
	Repeater['formL1'].End();
	Repeater['formR1'].End();
	Repeater['formgroundL1'].End();
	Repeater['formgroundL2'].End();
	Repeater['formgroundR1'].End();
	Repeater['formgroundR2'].End();
	Structure['formendfence'].Put('1',3.8,1.2,-0.3,,,,,);
	Structure['formendfence'].Put('1',7.4,1.2,-0.3,,,,,);
	Repeater['Vual'].End();

	Curve.BeginCircular(2000,0);
	SpeedLimit.Begin(60);
$Beacon=distance;
distance-300;
	Beacon.Put(6,0,300065);
$Beacon;
	Track['4'].X.Interpolate(11.22,-1000);
	Track['6'].X.Interpolate(11.22,-1000);

distance+100;
	Curve.End();
	Track['4'].X.Interpolate(6.25,0);
	Track['6'].X.Interpolate(6.25,0);

	Section.Begin(0,5);
$ATS=distance;
	include 'AbsolutePSignalBeacon.map';
$ATS;
	Signal['Type2gr'].Put(0,'1',-2.4,4.4,-0.06,,,,,);
	Structure['LabelBS4_L'].Put('1',-2.4,3,-0.1,,,,,);
	Structure['Sig_Pole'].Put('1',-2.4,-0.6,0,,,,,5);
	Structure['Sig_Arm_SU'].Put('1',-2.4,4.5,0,,,,,5);
	Structure['Sig_Arm_SD'].Put('1',-2.4,3.48,0,,,,,5);
	Structure['Sig_Base_Step'].Put('1',-2.4,-0.6,0,,,,,5);
	Repeater['SignalTarget'].Begin0( // リピーターキーには任意の文字列を指定できます。ステートメント間の判別のために使うも、補足情報をプラグインへ渡すために使うも良しです。
		'4', 0, 0, 0, // 連続ストラクチャーの設置先軌道は地上子の設置先軌道としてそのまま使用されます。
		'AtsEx::User::Toukaitetudou::SingleTrackSignal::SignalChange.Target', // ステートメント名。「Station.Load」や「Beacon.Put」に当たる部分をここで指定します。
		'sig1'); // 2 つめ以降のストラクチャーを使って、ステートメントに引数を持たせることができます。もちろん引数なしで良い場合は省略可。

	// 《備考：引数を渡す 2 種類の方法》
	// 
	// ① 2 つめ以降のストラクチャーを使う
	//  上の「パターン 1」で使った方法。
	//  ストラクチャーとしてあらかじめ定義しておく必要があるので、あらかじめとり得る値が数通りに絞られているケースでは見やすくて便利ですが、
	//  例えば「○○までの距離」など、とり得る値がほぼ無限にあるケースには不向きです。
	//
	// ② リピーターキーを使う
	//  下の「パターン 2」で使っている方法。
	//  ①とは異なり、とり得る値をストラクチャーとして定義しておく必要がないため、例えば「○○までの距離」などのとり得る値がほぼ無限にあるケースにも対応できます。
	// ただし①と比べて少し読みづらいので、基本的には①の方法をとり、①で対応できない場合にのみ②の方法を使うことを推奨します。

	Repeater['SignalTarget'].End(); // 終了を忘れると BVE が重くなるので注意。特に設置間隔を 0m に設定した場合、継続不可能な程にまで重くなることがあります。

distance+50;
	Curve.BeginCircular(-400,0);
	Track['4'].X.Interpolate(1.00,200);
	Track['6'].X.Interpolate(1.00,200);
	Train['902M'].Stop(3, 0, 1.7, 80);

distance+20;
	Curve.End();
$Beacon=distance;
distance+250;
	Beacon.Put(16,0,0);
	SpeedLimit.End();
$Beacon;
	Track['4'].X.Interpolate(0,0);
	Track['6'].X.Interpolate(0,0);
	Repeater['pole4'].End();
	//Repeater['Rail'].End();
	Repeater['rail2'].End();
	Repeater['rail3'].End();
	Repeater['rail4'].End();
	Repeater['rail5'].End();
	Repeater['rail6'].End();
	Repeater['kasen4'].End();
	Sound['901MVualDepT'].Play();
$distance=distance;